package com.jd.seed.exercise.algorithm.other;

import org.junit.Test;

/**
 * <pre>
 * 
 * 
 * </pre>
 * 
 * @author mecarlen 2019年3月21日 下午5:35:41
 */
public class RoundBulbOpenTest {

	@Test
	public void press() {
		int length = 100;
		boolean[] bulbs = RoundBulbOpen.initBulbsRoundState(length);
		RoundBulbOpen.print(bulbs);
		System.out.println("------------------------------------------------------------");
		RoundBulbOpen.press(bulbs);
		RoundBulbOpen.print(bulbs);
	}

	@Test
	public void numberReverse() {
		long number = 1234567890L;
		System.out.println(reverseNumber(number));
	}

	public long reverseNumber(long number) {
		String numStr = String.valueOf(number);
		char[] reverseStrChars = new char[numStr.length()];
		for (int i = 0; i < numStr.length() / 2; i++) {
			reverseStrChars[i] = numStr.charAt(numStr.length() - (i + 1));
			reverseStrChars[numStr.length() - (i + 1)] = numStr.charAt(i);
		}
		if (0 != numStr.length() % 2) {
			reverseStrChars[numStr.length() / 2] = numStr.charAt(numStr.length() / 2);
		}
		String reverseStr = String.valueOf(reverseStrChars);
		return Long.valueOf(reverseStr);
	}

	@Test
	public void upperAndLowerReverse() {
		System.out.println(reverseUpperAndLower('z'));
	}

	public char reverseUpperAndLower(char chr) {
		int ascVal = Integer.valueOf(chr);
		if (ascVal < 65 || ascVal > 122 || ascVal > 90 && ascVal < 97) {
			return chr;
		}
		if (ascVal > 90) {
			return (char) (ascVal - 32);
		} else {
			return (char) (ascVal + 32);
		}
	}

	@Test
	public void halfSearch() {
		int[] nums = new int[] { 4, 5, 9, 9, 12, 13, 14, 15, 15, 18 };
		int target = 9;
		int begin = 0;
		int targetIdx = -1;
		int end = nums.length;
		int currIdx = nums.length / 2;
		while (1 < end - begin) {
			if (nums[currIdx] < target) {
				begin = currIdx;
			} else if (nums[currIdx] > target) {
				end = currIdx;
			} else {
				targetIdx = currIdx;
				if (end - currIdx > 1 && nums[currIdx] == nums[currIdx - 1]) {
					end = currIdx;
				} else {
					begin = end;
				}
			}
			if (end - begin == 1) {
				targetIdx = nums[begin]==target?begin:-1;
				
			}
			currIdx = (begin + end) / 2;

		}
		System.out.println(targetIdx);

	}

	@Test
	public void byOffsetReverse() {
		String source = "cppjavapy";
		char[] str = source.toCharArray();
		reverseByOffset(str, 7);
		String res = String.valueOf(str);
		System.out.println(source + "--" + res);
	}

	public void reverseByOffset(char[] str, int offset) {
		if (null == str || str.length == 0 || offset % (str.length) == 0) {
			return;
		}
		if (offset > str.length - 1) {
			offset = offset % str.length;
		}
		for (int i = 0; i < str.length - 1; i++) {
			int idx = (i + offset) > str.length - 1 ? i + offset - str.length : i + offset;
			char tmp = str[idx];
			if (i / offset > 0) {
				if (offset - 1 < str.length - i) {
					str[idx] = str[i % offset];
					str[i % offset] = tmp;
				} else if (0 != str.length % offset && offset - 1 == str.length - i) {
					str[idx] = str[str.length - i];
					str[str.length - i] = tmp;
				} else {
					break;
				}
			} else {
				str[idx] = str[i % offset];
				str[i % offset] = tmp;
			}

		}
	}

}
